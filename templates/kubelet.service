[Unit]
Description=Kubernetes kubelet service
Documentation=http://docs.kubernetes.io
After=docker.service certfetcher.service
Requires=docker.service certfetcher.service

[Service]
Environment=KUBELET_IMAGE_TAG={{ kubernetes.version }}_coreos.0
Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
  --dns=host \
  --volume=resolv,kind=host,source=/etc/resolv.conf \
  --mount volume=resolv,target=/etc/resolv.conf \
  --volume var-lib-cni,kind=host,source=/var/lib/cni \
  --mount volume=var-lib-cni,target=/var/lib/cni \
  --volume var-log,kind=host,source=/var/log \
  --mount volume=var-log,target=/var/log \
  --volume kubelet-ssl,kind=host,source=/run/ssl/worker,readOnly=true \
  --mount volume=kubelet-ssl,target=/run/ssl/worker"


ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
ExecStartPre=/bin/mkdir -p /var/lib/cni
ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
ExecStart=/usr/lib/coreos/kubelet-wrapper \
  --allow-privileged \
  --anonymous-auth=false \
  --authentication-token-webhook \
  --authorization-mode=Webhook \
  --client-ca-file=/run/ssl/worker/ca.pem \
  --cloud-provider=aws \
  --cluster-dns={{ kubernetes.dns_service_ip }} \
  --cluster-domain=cluster.local \
  --cni-conf-dir=/etc/kubernetes/cni/net.d \
  --kubeconfig=/etc/kubernetes/worker-kubeconfig.yml \
  --network-plugin=cni \
  --node-labels=type={{ ec2_tag_role|replace("ami_build_", "") }} \
  --pod-manifest-path=/etc/kubernetes/manifests \
{% if ec2_tag_role == "ami_build_master" %}
  --register-with-taints=node-role.kubernetes.io/master=true:NoSchedule \
{% endif %}
  --require-kubeconfig \
  --tls-cert-file=/run/ssl/worker/worker.pem \
  --tls-private-key-file=/run/ssl/worker/worker-key.pem

ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
